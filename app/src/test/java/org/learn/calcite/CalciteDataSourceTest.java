/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.learn.calcite;

import com.mysql.cj.protocol.Resultset;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import javax.sql.DataSource;
import org.apache.calcite.adapter.jdbc.JdbcSchema;
import org.apache.calcite.avatica.util.Casing;
import org.apache.calcite.config.CalciteConnectionProperty;
import org.apache.calcite.jdbc.CalciteConnection;
import org.apache.calcite.jdbc.Driver;
import org.apache.calcite.schema.SchemaPlus;
import org.apache.calcite.util.Sources;
import org.junit.Test;

class CalciteDataSourceTest {

  void printResultSet(ResultSet resultSet) throws SQLException {
    final ResultSetMetaData metaData = resultSet.getMetaData();
    while (resultSet.next()) {
      int n = metaData.getColumnCount();
      if (n > 0) {
        for (int i = 1; ; i++) {
          System.out.println(metaData.getColumnLabel(i) + resultSet.getString(i));
          if (i == n) {
            break;
          }
        }
      }
    }
  }

  @Test
  public void singleSourceTest() throws SQLException {
    Properties config = new Properties();
    String path =
        Sources.of(CalciteDataSourceTest.class.getClassLoader().getResource("single-datasource.json"))
            .file()
            .getAbsolutePath();
    config.put(
        "model", path);

    config.put("lex", "MYSQL");
    String sql = "select * from DBS limit 10";

    try (Connection con = DriverManager.getConnection("jdbc:calcite:", config)) {
      try (Statement stmt = con.createStatement()) {
        try (ResultSet rs = stmt.executeQuery(sql)) {
          printResultSet(rs);
        }
      }
    }
  }

  @Test
  public void multiSourceTest() throws SQLException {
    Properties config = new Properties();
    String path =
        Sources.of(CalciteDataSourceTest.class.getClassLoader().getResource("multi-datasource.json"))
            .file()
            .getAbsolutePath();
    config.put("model", path);
    config.put("lex", "MYSQL");
    String sql =
        "SELECT s.name,c.name FROM db1.student AS s join db2.colleage AS c on s.cid = c.id";

    try (Connection con = DriverManager.getConnection("jdbc:calcite:", config)) {
      try (Statement stmt = con.createStatement()) {
        try (ResultSet rs = stmt.executeQuery(sql)) {
          printResultSet(rs);
        }
      }
    }
  }

  @Test
  public void schemaTest() throws SQLException {
    DataSource mysqlDataSource = JdbcSchema.dataSource(
        // "jdbc:sqlserver://localhost:1433;databaseName=Chinook",
        "jdbc:mysql://10.201.0.205:3306/hivemetastore_db_dev_212",
        // "com.microsoft.sqlserver.jdbc.SQLServerDriver",
        "com.mysql.cj.jdbc.Driver",
        "root",
        "123456"
    );

    DriverManager.registerDriver(new Driver());
    Properties properties = new Properties();
    properties.setProperty(CalciteConnectionProperty.FUN.camelName(), "mysql,postgresql");
    properties.setProperty(CalciteConnectionProperty.CASE_SENSITIVE.camelName(), "false");
    properties.setProperty(CalciteConnectionProperty.QUOTED_CASING.camelName(), Casing.UNCHANGED.name());
    properties.setProperty(CalciteConnectionProperty.UNQUOTED_CASING.camelName(), Casing.UNCHANGED.name());
    CalciteConnection calciteConnection = DriverManager.getConnection(
        "jdbc:calcite:", properties).unwrap(CalciteConnection.class);
    SchemaPlus rootSchema = calciteConnection.getRootSchema();
    rootSchema.add(
        "mysql_1",
        JdbcSchema.create(rootSchema, "mysql_1", mysqlDataSource, null, null)
    );
    ResultSet rs=calciteConnection.createStatement().executeQuery("select * from mysql_1.DBS limit 10");
    printResultSet(rs);
  }
}
